// default ratio on browsers is 1rem = 16px
$remperpx: 1rem / 16px ;

$min: (
    width: 320px * $remperpx,
    font-size: 19px * $remperpx,
    scale: 4/3
) ;
$max: (
    width: 2400px * $remperpx,
    font-size: 24px * $remperpx,
    scale: 3/2
) ;

$min-width: map-get($min, width) ;
$max-width: map-get($max, width) ;

$max-font-size: map-get($max, font-size) ;
$min-font-size: map-get($min, font-size) ;

$min-scale: map-get($min, scale) ;
$max-scale: map-get($max, scale) ;

@function pow($x, $n) {
    @if $n < 0 {
        $n: -$n ;
        $x: 1/$x ;
    }
    $p: 1 ;
    @for $i from 0 to $n {
        $p: $p * $x ;
    }
    @return $p ;
}

@function clamp($a, $t, $b) {
    @return #{"clamp(" $a ", " $t ", " $b ")"};
}

// $t is between 0 and 1 rem
@function lerp($a, $b, $t) {
    $A: $a / 1rem;
    $B: $b / 1rem;
    $C: $B - $A ;
    @return clamp($a,
                  $a " + " $C " * (" $t ")",
                  $b);
}
// outputs between 0 and 1 rem
@function linstep($a, $b, $x) {
    $A: $a / 1rem;
    $B: $b / 1rem;
    $c: 1/($B - $A) ;
    @return clamp(0rem,
                  #{"((" $x ") * " $c " - " $a * $c ")"},
                  1rem);
}

@function scale($n) {
    @return lerp(pow($min-scale, $n) * 1rem, pow($max-scale, $n) * 1rem,
                     linstep($min-width, $max-width, 100vw));
}

h1 { font-size: scale(2) ; }
h2 { font-size: scale(1) ; }

@media screen {
    :root {
        font-size: 0.5 * ($min-font-size + $max-font-size) ;
        font-size:
            lerp($min-font-size, $max-font-size,
                 linstep($min-width, $max-width, 100vw));
    }
}

@media screen {
    // FIXME provide better fallbacks for fluid layout
    :root {
        padding-inline: 0.8rem ;
        padding-inline:
            lerp(0.8rem, 6rem,
                 linstep(320px * $remperpx, 1200px * $remperpx,
                         100vw));
        padding-block-start:
            lerp(0rem, var(--line-height),
                     linstep($min-width, 1200px * $remperpx,
                             100vw));
    }

    body {
        padding-inline-start:
            lerp(0rem, 1.5rem,
                 linstep(320px * $remperpx, 700px * $remperpx,
                         100vw));
    }
}

main > :is(ul, ol) {
    padding-inline-start:
            lerp(0rem, 2rem,
                 #{"(1rem - " linstep(400px * $remperpx, 600px * $remperpx,
                                    100vw) ")"});
}
