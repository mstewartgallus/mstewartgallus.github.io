#toc {
    width: 100% ;
}

hgroup p {
    margin-block: 0 ;
}

main > :is(ul, ol) {
    padding-inline-start:
            lerp(0rem, 2rem,
                 #{"(1rem - " linstep(400px * $remperpx, 600px * $remperpx,
                                    100vw) ")"});
}

header {
    position: relative ;
}
main [rel~="bookmark"] {
    position: absolute ;
    right: 0 ;
    top: 0;
}

.breadcrumb {
    all: unset ;
    padding: 0 ;
    margin: 0;
    display: flex ;
    flex-wrap: wrap ;
    column-gap: 1ch ;
    inline-size: $paragraph-width ;
    max-inline-size: 100% ;
}
.breadcrumb li {
    all: unset ;
}

.breadcrumb li::before {
  display: inline-block;
  margin-inline-end: 0.5em;
  transform: rotate(15deg);
  border-inline-end: 0.1em solid currentcolor;
  block-size: 0.8em;
  content: "";
  color: var(--emphasis-text);
}

.sr-only {
    position: absolute ;
    display: block ;
    z-index: 1000 ;
    background-color: var(--canvas);
    outline-offset: 0 ;
    padding-inline: 1em ;
    padding-block-end: 0.5 * $line ;
}
.sr-only:not(:focus-within) {
    position: absolute !important ;
    left: -10000px !important ;
    top: auto !important ;
    width: 1px !important ;
    height: 1px !important ;
    clip-path: polygon(0px 0px, 0px 0px, 0px 0px) !important ;
    overflow: hidden !important ;
}

ul.tags {
    all: unset ;
    display: flex ;
    margin-block-end: $line ;
    flex-wrap: wrap ;
    column-gap: 1em ;
    inline-size: $paragraph-width ;
    max-inline-size: 100% ;
}

:is(#toc) ul {
    all: unset ;
    display: flex ;
    flex-wrap: wrap ;
    column-gap: 1em ;
}
:is(#toc, .tags) li {
    all: unset ;
}

#toc {
    margin-block: $line ;
}

.greentext > li {
    all: unset ;
    display: block ;
}
.greentext > li::before {
    display: inline-block ;
    margin-inline-end: 1ch;
    transform: rotate(-45deg) skew(14deg, 14deg);
    border-block-end: 0.2ch solid currentcolor;
    border-inline-end: 0.2ch solid currentcolor;
    block-size: 1ex;
    inline-size: 1ex;
    content: "";
}

.greentext {
    all: unset ;
    display: block ;
    list-style-position: inside ;
    color: var(--green-text) ;
    @include hyphens(manual);
}

@counter-style detail {
    system: cyclic;
    symbols: "▶";
    suffix: "\2003";
}
@counter-style opendetail {
    system: cyclic;
    symbols: "▼";
    suffix: "\2003";
}


// FIXME the animation is intended to reduce flickering
// so how should I handle prefers reduced motion?

#search-list {
    [aria-hidden="false"],
    [aria-hidden="false"] * {
        opacity: 1 ;
        transition: opacity 0.3s;
    }

    [aria-hidden="true"],
    [aria-hidden="true"] * {
        opacity: 0 ;
        transition: opacity 2s;
    }
}
