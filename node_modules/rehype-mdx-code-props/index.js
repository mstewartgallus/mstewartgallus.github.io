import { Parser } from 'acorn';
import jsx from 'acorn-jsx';
import { toEstree } from 'hast-util-to-estree';
import { visitParents } from 'unist-util-visit-parents';
const parser = Parser.extend(jsx());
/**
 * Get the JSX attributes for an estree program containing just a single JSX element.
 *
 * @param program
 *   The estree program
 * @returns
 *   The JSX attributes of the JSX element.
 */
function getOpeningAttributes(program) {
    const { expression } = program.body[0];
    const { openingElement } = expression;
    return openingElement.attributes;
}
/**
 * Convert code meta to JSX elements.
 *
 * @param meta
 *   The meta to conert
 * @returns
 *   A list of MDX JSX attributes.
 */
function parseMeta(meta) {
    const program = parser.parse(`<c ${meta} />`, {
        ecmaVersion: 'latest'
    });
    return getOpeningAttributes(program);
}
/**
 * An MDX rehype plugin for transforming markdown code meta into JSX props.
 */
const rehypeMdxCodeProps = ({ tagName = 'pre' } = {}) => {
    if (tagName !== 'code' && tagName !== 'pre') {
        throw new Error(`Expected tagName to be 'code' or 'pre', got: ${tagName}`);
    }
    return (ast) => {
        visitParents(ast, 'element', (node, ancestors) => {
            var _a;
            if (node.tagName !== 'code') {
                return;
            }
            const meta = (_a = node.data) === null || _a === void 0 ? void 0 : _a.meta;
            if (typeof meta !== 'string') {
                return;
            }
            if (!meta) {
                return;
            }
            let child = node;
            let parent = ancestors.at(-1);
            if (tagName === 'pre') {
                if (parent.type !== 'element') {
                    return;
                }
                if (parent.tagName !== 'pre') {
                    return;
                }
                if (parent.children.length !== 1) {
                    return;
                }
                child = parent;
                parent = ancestors.at(-2);
            }
            const estree = toEstree(child);
            getOpeningAttributes(estree).push(...parseMeta(meta));
            parent.children[parent.children.indexOf(child)] = {
                type: 'mdxFlowExpression',
                value: '',
                data: { estree }
            };
        });
    };
};
export default rehypeMdxCodeProps;
