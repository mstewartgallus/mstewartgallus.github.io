{"version":3,"file":"638-527137b1fd03cfef0c2e.js","mappings":"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","sources":["webpack://words-to-kick-your-teeth-out/./node_modules/wicg-inert/dist/inert.esm.js","webpack://words-to-kick-your-teeth-out/./src/features/ui/pane-client/panel.module.css","webpack://words-to-kick-your-teeth-out/./src/features/ui/pane-client/pane-client.jsx"],"sourcesContent":["var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n * This work is licensed under the W3C Software and Document License\n * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).\n */\n\n(function () {\n  // Return early if we're not running inside of the browser.\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  // Convenience function for converting NodeLists.\n  /** @type {typeof Array.prototype.slice} */\n  var slice = Array.prototype.slice;\n\n  /**\n   * IE has a non-standard name for \"matches\".\n   * @type {typeof Element.prototype.matches}\n   */\n  var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\n\n  /** @type {string} */\n  var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');\n\n  /**\n   * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`\n   * attribute.\n   *\n   * Its main functions are:\n   *\n   * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the\n   *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering\n   *   each focusable node in the subtree with the singleton `InertManager` which manages all known\n   *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`\n   *   instance exists for each focusable node which has at least one inert root as an ancestor.\n   *\n   * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`\n   *   attribute is removed from the root node). This is handled in the destructor, which calls the\n   *   `deregister` method on `InertManager` for each managed inert node.\n   */\n\n  var InertRoot = function () {\n    /**\n     * @param {!HTMLElement} rootElement The HTMLElement at the root of the inert subtree.\n     * @param {!InertManager} inertManager The global singleton InertManager object.\n     */\n    function InertRoot(rootElement, inertManager) {\n      _classCallCheck(this, InertRoot);\n\n      /** @type {!InertManager} */\n      this._inertManager = inertManager;\n\n      /** @type {!HTMLElement} */\n      this._rootElement = rootElement;\n\n      /**\n       * @type {!Set<!InertNode>}\n       * All managed focusable nodes in this InertRoot's subtree.\n       */\n      this._managedNodes = new Set();\n\n      // Make the subtree hidden from assistive technology\n      if (this._rootElement.hasAttribute('aria-hidden')) {\n        /** @type {?string} */\n        this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');\n      } else {\n        this._savedAriaHidden = null;\n      }\n      this._rootElement.setAttribute('aria-hidden', 'true');\n\n      // Make all focusable elements in the subtree unfocusable and add them to _managedNodes\n      this._makeSubtreeUnfocusable(this._rootElement);\n\n      // Watch for:\n      // - any additions in the subtree: make them unfocusable too\n      // - any removals from the subtree: remove them from this inert root's managed nodes\n      // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable\n      //   element, make that node a managed node.\n      this._observer = new MutationObserver(this._onMutation.bind(this));\n      this._observer.observe(this._rootElement, {\n        attributes: true,\n        childList: true,\n        subtree: true\n      });\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.  This unwinds all of the state\n     * stored in this object and updates the state of all of the managed nodes.\n     */\n\n    _createClass(InertRoot, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._observer.disconnect();\n        if (this._rootElement) {\n          if (this._savedAriaHidden !== null) {\n            this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);\n          } else {\n            this._rootElement.removeAttribute('aria-hidden');\n          }\n        }\n        this._managedNodes.forEach(function (inertNode) {\n          this._unmanageNode(inertNode.node);\n        }, this);\n\n        // Note we cast the nulls to the ANY type here because:\n        // 1) We want the class properties to be declared as non-null, or else we\n        //    need even more casts throughout this code. All bets are off if an\n        //    instance has been destroyed and a method is called.\n        // 2) We don't want to cast \"this\", because we want type-aware optimizations\n        //    to know which properties we're setting.\n        this._observer = /** @type {?} */null;\n        this._rootElement = /** @type {?} */null;\n        this._managedNodes = /** @type {?} */null;\n        this._inertManager = /** @type {?} */null;\n      }\n\n      /**\n       * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.\n       */\n    }, {\n      key: '_makeSubtreeUnfocusable',\n      /**\n       * @param {!Node} startNode\n       */\n      value: function _makeSubtreeUnfocusable(startNode) {\n        var _this2 = this;\n        composedTreeWalk(startNode, function (node) {\n          return _this2._visitNode(node);\n        });\n        var activeElement = document.activeElement;\n        if (!document.body.contains(startNode)) {\n          // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.\n          var node = startNode;\n          /** @type {!ShadowRoot|undefined} */\n          var root = undefined;\n          while (node) {\n            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n              root = /** @type {!ShadowRoot} */node;\n              break;\n            }\n            node = node.parentNode;\n          }\n          if (root) {\n            activeElement = root.activeElement;\n          }\n        }\n        if (startNode.contains(activeElement)) {\n          activeElement.blur();\n          // In IE11, if an element is already focused, and then set to tabindex=-1\n          // calling blur() will not actually move the focus.\n          // To work around this we call focus() on the body instead.\n          if (activeElement === document.activeElement) {\n            document.body.focus();\n          }\n        }\n      }\n\n      /**\n       * @param {!Node} node\n       */\n    }, {\n      key: '_visitNode',\n      value: function _visitNode(node) {\n        if (node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n        var element = /** @type {!HTMLElement} */node;\n\n        // If a descendant inert root becomes un-inert, its descendants will still be inert because of\n        // this inert root, so all of its managed nodes need to be adopted by this InertRoot.\n        if (element !== this._rootElement && element.hasAttribute('inert')) {\n          this._adoptInertRoot(element);\n        }\n        if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {\n          this._manageNode(element);\n        }\n      }\n\n      /**\n       * Register the given node with this InertRoot and with InertManager.\n       * @param {!Node} node\n       */\n    }, {\n      key: '_manageNode',\n      value: function _manageNode(node) {\n        var inertNode = this._inertManager.register(node, this);\n        this._managedNodes.add(inertNode);\n      }\n\n      /**\n       * Unregister the given node with this InertRoot and with InertManager.\n       * @param {!Node} node\n       */\n    }, {\n      key: '_unmanageNode',\n      value: function _unmanageNode(node) {\n        var inertNode = this._inertManager.deregister(node, this);\n        if (inertNode) {\n          this._managedNodes['delete'](inertNode);\n        }\n      }\n\n      /**\n       * Unregister the entire subtree starting at `startNode`.\n       * @param {!Node} startNode\n       */\n    }, {\n      key: '_unmanageSubtree',\n      value: function _unmanageSubtree(startNode) {\n        var _this3 = this;\n        composedTreeWalk(startNode, function (node) {\n          return _this3._unmanageNode(node);\n        });\n      }\n\n      /**\n       * If a descendant node is found with an `inert` attribute, adopt its managed nodes.\n       * @param {!HTMLElement} node\n       */\n    }, {\n      key: '_adoptInertRoot',\n      value: function _adoptInertRoot(node) {\n        var inertSubroot = this._inertManager.getInertRoot(node);\n\n        // During initialisation this inert root may not have been registered yet,\n        // so register it now if need be.\n        if (!inertSubroot) {\n          this._inertManager.setInert(node, true);\n          inertSubroot = this._inertManager.getInertRoot(node);\n        }\n        inertSubroot.managedNodes.forEach(function (savedInertNode) {\n          this._manageNode(savedInertNode.node);\n        }, this);\n      }\n\n      /**\n       * Callback used when mutation observer detects subtree additions, removals, or attribute changes.\n       * @param {!Array<!MutationRecord>} records\n       * @param {!MutationObserver} self\n       */\n    }, {\n      key: '_onMutation',\n      value: function _onMutation(records, self) {\n        records.forEach(function (record) {\n          var target = /** @type {!HTMLElement} */record.target;\n          if (record.type === 'childList') {\n            // Manage added nodes\n            slice.call(record.addedNodes).forEach(function (node) {\n              this._makeSubtreeUnfocusable(node);\n            }, this);\n\n            // Un-manage removed nodes\n            slice.call(record.removedNodes).forEach(function (node) {\n              this._unmanageSubtree(node);\n            }, this);\n          } else if (record.type === 'attributes') {\n            if (record.attributeName === 'tabindex') {\n              // Re-initialise inert node if tabindex changes\n              this._manageNode(target);\n            } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {\n              // If a new inert root is added, adopt its managed nodes and make sure it knows about the\n              // already managed nodes from this inert subroot.\n              this._adoptInertRoot(target);\n              var inertSubroot = this._inertManager.getInertRoot(target);\n              this._managedNodes.forEach(function (managedNode) {\n                if (target.contains(managedNode.node)) {\n                  inertSubroot._manageNode(managedNode.node);\n                }\n              });\n            }\n          }\n        }, this);\n      }\n    }, {\n      key: 'managedNodes',\n      get: function get() {\n        return new Set(this._managedNodes);\n      }\n\n      /** @return {boolean} */\n    }, {\n      key: 'hasSavedAriaHidden',\n      get: function get() {\n        return this._savedAriaHidden !== null;\n      }\n\n      /** @param {?string} ariaHidden */\n    }, {\n      key: 'savedAriaHidden',\n      set: function set(ariaHidden) {\n        this._savedAriaHidden = ariaHidden;\n      }\n\n      /** @return {?string} */,\n\n      get: function get() {\n        return this._savedAriaHidden;\n      }\n    }]);\n    return InertRoot;\n  }();\n\n  /**\n   * `InertNode` initialises and manages a single inert node.\n   * A node is inert if it is a descendant of one or more inert root elements.\n   *\n   * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and\n   * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element\n   * is intrinsically focusable or not.\n   *\n   * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an\n   * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the\n   * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s\n   * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,\n   * or removes the `tabindex` attribute if the element is intrinsically focusable.\n   */\n\n  var InertNode = function () {\n    /**\n     * @param {!Node} node A focusable element to be made inert.\n     * @param {!InertRoot} inertRoot The inert root element associated with this inert node.\n     */\n    function InertNode(node, inertRoot) {\n      _classCallCheck(this, InertNode);\n\n      /** @type {!Node} */\n      this._node = node;\n\n      /** @type {boolean} */\n      this._overrodeFocusMethod = false;\n\n      /**\n       * @type {!Set<!InertRoot>} The set of descendant inert roots.\n       *    If and only if this set becomes empty, this node is no longer inert.\n       */\n      this._inertRoots = new Set([inertRoot]);\n\n      /** @type {?number} */\n      this._savedTabIndex = null;\n\n      /** @type {boolean} */\n      this._destroyed = false;\n\n      // Save any prior tabindex info and make this node untabbable\n      this.ensureUntabbable();\n    }\n\n    /**\n     * Call this whenever this object is about to become obsolete.\n     * This makes the managed node focusable again and deletes all of the previously stored state.\n     */\n\n    _createClass(InertNode, [{\n      key: 'destructor',\n      value: function destructor() {\n        this._throwIfDestroyed();\n        if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {\n          var element = /** @type {!HTMLElement} */this._node;\n          if (this._savedTabIndex !== null) {\n            element.setAttribute('tabindex', this._savedTabIndex);\n          } else {\n            element.removeAttribute('tabindex');\n          }\n\n          // Use `delete` to restore native focus method.\n          if (this._overrodeFocusMethod) {\n            delete element.focus;\n          }\n        }\n\n        // See note in InertRoot.destructor for why we cast these nulls to ANY.\n        this._node = /** @type {?} */null;\n        this._inertRoots = /** @type {?} */null;\n        this._destroyed = true;\n      }\n\n      /**\n       * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.\n       * If the object has been destroyed, any attempt to access it will cause an exception.\n       */\n    }, {\n      key: '_throwIfDestroyed',\n      /**\n       * Throw if user tries to access destroyed InertNode.\n       */\n      value: function _throwIfDestroyed() {\n        if (this.destroyed) {\n          throw new Error('Trying to access destroyed InertNode');\n        }\n      }\n\n      /** @return {boolean} */\n    }, {\n      key: 'ensureUntabbable',\n      /** Save the existing tabindex value and make the node untabbable and unfocusable */\n      value: function ensureUntabbable() {\n        if (this.node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n        var element = /** @type {!HTMLElement} */this.node;\n        if (matches.call(element, _focusableElementsString)) {\n          if ( /** @type {!HTMLElement} */element.tabIndex === -1 && this.hasSavedTabIndex) {\n            return;\n          }\n          if (element.hasAttribute('tabindex')) {\n            this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n          }\n          element.setAttribute('tabindex', '-1');\n          if (element.nodeType === Node.ELEMENT_NODE) {\n            element.focus = function () {};\n            this._overrodeFocusMethod = true;\n          }\n        } else if (element.hasAttribute('tabindex')) {\n          this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n          element.removeAttribute('tabindex');\n        }\n      }\n\n      /**\n       * Add another inert root to this inert node's set of managing inert roots.\n       * @param {!InertRoot} inertRoot\n       */\n    }, {\n      key: 'addInertRoot',\n      value: function addInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots.add(inertRoot);\n      }\n\n      /**\n       * Remove the given inert root from this inert node's set of managing inert roots.\n       * If the set of managing inert roots becomes empty, this node is no longer inert,\n       * so the object should be destroyed.\n       * @param {!InertRoot} inertRoot\n       */\n    }, {\n      key: 'removeInertRoot',\n      value: function removeInertRoot(inertRoot) {\n        this._throwIfDestroyed();\n        this._inertRoots['delete'](inertRoot);\n        if (this._inertRoots.size === 0) {\n          this.destructor();\n        }\n      }\n    }, {\n      key: 'destroyed',\n      get: function get() {\n        return (/** @type {!InertNode} */this._destroyed\n        );\n      }\n    }, {\n      key: 'hasSavedTabIndex',\n      get: function get() {\n        return this._savedTabIndex !== null;\n      }\n\n      /** @return {!Node} */\n    }, {\n      key: 'node',\n      get: function get() {\n        this._throwIfDestroyed();\n        return this._node;\n      }\n\n      /** @param {?number} tabIndex */\n    }, {\n      key: 'savedTabIndex',\n      set: function set(tabIndex) {\n        this._throwIfDestroyed();\n        this._savedTabIndex = tabIndex;\n      }\n\n      /** @return {?number} */,\n\n      get: function get() {\n        this._throwIfDestroyed();\n        return this._savedTabIndex;\n      }\n    }]);\n    return InertNode;\n  }();\n\n  /**\n   * InertManager is a per-document singleton object which manages all inert roots and nodes.\n   *\n   * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`\n   * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.\n   * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant\n   * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance\n   * is created for each such node, via the `_managedNodes` map.\n   */\n\n  var InertManager = function () {\n    /**\n     * @param {!Document} document\n     */\n    function InertManager(document) {\n      _classCallCheck(this, InertManager);\n      if (!document) {\n        throw new Error('Missing required argument; InertManager needs to wrap a document.');\n      }\n\n      /** @type {!Document} */\n      this._document = document;\n\n      /**\n       * All managed nodes known to this InertManager. In a map to allow looking up by Node.\n       * @type {!Map<!Node, !InertNode>}\n       */\n      this._managedNodes = new Map();\n\n      /**\n       * All inert roots known to this InertManager. In a map to allow looking up by Node.\n       * @type {!Map<!Node, !InertRoot>}\n       */\n      this._inertRoots = new Map();\n\n      /**\n       * Observer for mutations on `document.body`.\n       * @type {!MutationObserver}\n       */\n      this._observer = new MutationObserver(this._watchForInert.bind(this));\n\n      // Add inert style.\n      addInertStyle(document.head || document.body || document.documentElement);\n\n      // Wait for document to be loaded.\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));\n      } else {\n        this._onDocumentLoaded();\n      }\n    }\n\n    /**\n     * Set whether the given element should be an inert root or not.\n     * @param {!HTMLElement} root\n     * @param {boolean} inert\n     */\n\n    _createClass(InertManager, [{\n      key: 'setInert',\n      value: function setInert(root, inert) {\n        if (inert) {\n          if (this._inertRoots.has(root)) {\n            // element is already inert\n            return;\n          }\n          var inertRoot = new InertRoot(root, this);\n          root.setAttribute('inert', '');\n          this._inertRoots.set(root, inertRoot);\n          // If not contained in the document, it must be in a shadowRoot.\n          // Ensure inert styles are added there.\n          if (!this._document.body.contains(root)) {\n            var parent = root.parentNode;\n            while (parent) {\n              if (parent.nodeType === 11) {\n                addInertStyle(parent);\n              }\n              parent = parent.parentNode;\n            }\n          }\n        } else {\n          if (!this._inertRoots.has(root)) {\n            // element is already non-inert\n            return;\n          }\n          var _inertRoot = this._inertRoots.get(root);\n          _inertRoot.destructor();\n          this._inertRoots['delete'](root);\n          root.removeAttribute('inert');\n        }\n      }\n\n      /**\n       * Get the InertRoot object corresponding to the given inert root element, if any.\n       * @param {!Node} element\n       * @return {!InertRoot|undefined}\n       */\n    }, {\n      key: 'getInertRoot',\n      value: function getInertRoot(element) {\n        return this._inertRoots.get(element);\n      }\n\n      /**\n       * Register the given InertRoot as managing the given node.\n       * In the case where the node has a previously existing inert root, this inert root will\n       * be added to its set of inert roots.\n       * @param {!Node} node\n       * @param {!InertRoot} inertRoot\n       * @return {!InertNode} inertNode\n       */\n    }, {\n      key: 'register',\n      value: function register(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (inertNode !== undefined) {\n          // node was already in an inert subtree\n          inertNode.addInertRoot(inertRoot);\n        } else {\n          inertNode = new InertNode(node, inertRoot);\n        }\n        this._managedNodes.set(node, inertNode);\n        return inertNode;\n      }\n\n      /**\n       * De-register the given InertRoot as managing the given inert node.\n       * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert\n       * node from the InertManager's set of managed nodes if it is destroyed.\n       * If the node is not currently managed, this is essentially a no-op.\n       * @param {!Node} node\n       * @param {!InertRoot} inertRoot\n       * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.\n       */\n    }, {\n      key: 'deregister',\n      value: function deregister(node, inertRoot) {\n        var inertNode = this._managedNodes.get(node);\n        if (!inertNode) {\n          return null;\n        }\n        inertNode.removeInertRoot(inertRoot);\n        if (inertNode.destroyed) {\n          this._managedNodes['delete'](node);\n        }\n        return inertNode;\n      }\n\n      /**\n       * Callback used when document has finished loading.\n       */\n    }, {\n      key: '_onDocumentLoaded',\n      value: function _onDocumentLoaded() {\n        // Find all inert roots in document and make them actually inert.\n        var inertElements = slice.call(this._document.querySelectorAll('[inert]'));\n        inertElements.forEach(function (inertElement) {\n          this.setInert(inertElement, true);\n        }, this);\n\n        // Comment this out to use programmatic API only.\n        this._observer.observe(this._document.body || this._document.documentElement, {\n          attributes: true,\n          subtree: true,\n          childList: true\n        });\n      }\n\n      /**\n       * Callback used when mutation observer detects attribute changes.\n       * @param {!Array<!MutationRecord>} records\n       * @param {!MutationObserver} self\n       */\n    }, {\n      key: '_watchForInert',\n      value: function _watchForInert(records, self) {\n        var _this = this;\n        records.forEach(function (record) {\n          switch (record.type) {\n            case 'childList':\n              slice.call(record.addedNodes).forEach(function (node) {\n                if (node.nodeType !== Node.ELEMENT_NODE) {\n                  return;\n                }\n                var inertElements = slice.call(node.querySelectorAll('[inert]'));\n                if (matches.call(node, '[inert]')) {\n                  inertElements.unshift(node);\n                }\n                inertElements.forEach(function (inertElement) {\n                  this.setInert(inertElement, true);\n                }, _this);\n              }, _this);\n              break;\n            case 'attributes':\n              if (record.attributeName !== 'inert') {\n                return;\n              }\n              var target = /** @type {!HTMLElement} */record.target;\n              var inert = target.hasAttribute('inert');\n              _this.setInert(target, inert);\n              break;\n          }\n        }, this);\n      }\n    }]);\n    return InertManager;\n  }();\n\n  /**\n   * Recursively walk the composed tree from |node|.\n   * @param {!Node} node\n   * @param {(function (!HTMLElement))=} callback Callback to be called for each element traversed,\n   *     before descending into child nodes.\n   * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.\n   */\n\n  function composedTreeWalk(node, callback, shadowRootAncestor) {\n    if (node.nodeType == Node.ELEMENT_NODE) {\n      var element = /** @type {!HTMLElement} */node;\n      if (callback) {\n        callback(element);\n      }\n\n      // Descend into node:\n      // If it has a ShadowRoot, ignore all child elements - these will be picked\n      // up by the <content> or <shadow> elements. Descend straight into the\n      // ShadowRoot.\n      var shadowRoot = /** @type {!HTMLElement} */element.shadowRoot;\n      if (shadowRoot) {\n        composedTreeWalk(shadowRoot, callback, shadowRoot);\n        return;\n      }\n\n      // If it is a <content> element, descend into distributed elements - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'content') {\n        var content = /** @type {!HTMLContentElement} */element;\n        // Verifies if ShadowDom v0 is supported.\n        var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];\n        for (var i = 0; i < distributedNodes.length; i++) {\n          composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n\n      // If it is a <slot> element, descend into assigned nodes - these\n      // are elements from outside the shadow root which are rendered inside the\n      // shadow DOM.\n      if (element.localName == 'slot') {\n        var slot = /** @type {!HTMLSlotElement} */element;\n        // Verify if ShadowDom v1 is supported.\n        var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({\n          flatten: true\n        }) : [];\n        for (var _i = 0; _i < _distributedNodes.length; _i++) {\n          composedTreeWalk(_distributedNodes[_i], callback, shadowRootAncestor);\n        }\n        return;\n      }\n    }\n\n    // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>\n    // element, nor a <shadow> element recurse normally.\n    var child = node.firstChild;\n    while (child != null) {\n      composedTreeWalk(child, callback, shadowRootAncestor);\n      child = child.nextSibling;\n    }\n  }\n\n  /**\n   * Adds a style element to the node containing the inert specific styles\n   * @param {!Node} node\n   */\n  function addInertStyle(node) {\n    if (node.querySelector('style#inert-style, link#inert-style')) {\n      return;\n    }\n    var style = document.createElement('style');\n    style.setAttribute('id', 'inert-style');\n    style.textContent = '\\n' + '[inert] {\\n' + '  pointer-events: none;\\n' + '  cursor: default;\\n' + '}\\n' + '\\n' + '[inert], [inert] * {\\n' + '  -webkit-user-select: none;\\n' + '  -moz-user-select: none;\\n' + '  -ms-user-select: none;\\n' + '  user-select: none;\\n' + '}\\n';\n    node.appendChild(style);\n  }\n  if (!HTMLElement.prototype.hasOwnProperty('inert')) {\n    /** @type {!InertManager} */\n    var inertManager = new InertManager(document);\n    Object.defineProperty(HTMLElement.prototype, 'inert', {\n      enumerable: true,\n      /** @this {!HTMLElement} */\n      get: function get() {\n        return this.hasAttribute('inert');\n      },\n      /** @this {!HTMLElement} */\n      set: function set(inert) {\n        inertManager.setInert(this, inert);\n      }\n    });\n  }\n})();","// extracted by mini-css-extract-plugin\nexport var content = \"panel-module--content--be72f\";\nexport var contentHidden = \"panel-module--contentHidden--f9090\";\nexport var disclosure = \"panel-module--disclosure--eb63f\";\nexport var wrapper = \"panel-module--wrapper--83dc6\";\nexport var wrapperInert = \"panel-module--wrapperInert--9ec01\";","import { useDeferredValue } from \"react\";\nimport {\n    disclosure,\n    wrapper, wrapperInert,\n    content, contentHidden\n} from \"./panel.module.css\";\n\nexport const PaneClient = ({children, open, ...props}) => {\n    const deferredOpen = useDeferredValue(open);\n\n    const wrapperClass = [wrapper, deferredOpen ? '' : wrapperInert].join(' ');\n    const contentClass = [content, deferredOpen ? '' : contentHidden].join(' ');\n    return <div className={disclosure} {...props}>\n               <div className={wrapperClass}>\n                   <div className={contentClass} inert={open ? null : \"inert\"}>\n                       {children}\n                   </div>\n               </div>\n           </div>;\n};\n\nexport default PaneClient;\n"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","window","slice","Array","matches","Element","msMatchesSelector","_focusableElementsString","join","InertRoot","rootElement","inertManager","this","_inertManager","_rootElement","_managedNodes","Set","hasAttribute","_savedAriaHidden","getAttribute","setAttribute","_makeSubtreeUnfocusable","_observer","MutationObserver","_onMutation","bind","observe","attributes","childList","subtree","value","disconnect","removeAttribute","forEach","inertNode","_unmanageNode","node","startNode","_this2","composedTreeWalk","_visitNode","activeElement","document","body","contains","root","undefined","nodeType","Node","DOCUMENT_FRAGMENT_NODE","parentNode","blur","focus","ELEMENT_NODE","element","_adoptInertRoot","call","_manageNode","register","add","deregister","_this3","inertSubroot","getInertRoot","setInert","managedNodes","savedInertNode","records","self","record","type","addedNodes","removedNodes","_unmanageSubtree","attributeName","managedNode","get","set","ariaHidden","InertNode","inertRoot","_node","_overrodeFocusMethod","_inertRoots","_savedTabIndex","_destroyed","ensureUntabbable","_throwIfDestroyed","destroyed","Error","tabIndex","hasSavedTabIndex","size","destructor","InertManager","_document","Map","_watchForInert","addInertStyle","head","documentElement","readyState","addEventListener","_onDocumentLoaded","inert","has","parent","addInertRoot","removeInertRoot","querySelectorAll","inertElement","_this","inertElements","unshift","HTMLElement","hasOwnProperty","callback","shadowRootAncestor","shadowRoot","localName","content","distributedNodes","getDistributedNodes","slot","_distributedNodes","assignedNodes","flatten","_i","child","firstChild","nextSibling","querySelector","style","createElement","textContent","appendChild","wrapper","PaneClient","_ref","children","open","deferredOpen","useDeferredValue","wrapperClass","contentClass","_jsx","className"],"sourceRoot":""}