{"version":3,"file":"53-ce9082a9b66ff1001fe7.js","mappings":"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","sources":["webpack://words-to-kick-your-teeth-out/./src/features/post/comment.jsx","webpack://words-to-kick-your-teeth-out/./src/features/post/comment.module.css","webpack://words-to-kick-your-teeth-out/./src/features/post/comment-list.jsx","webpack://words-to-kick-your-teeth-out/./src/features/post/comment-list.module.css","webpack://words-to-kick-your-teeth-out/./src/features/post/comments-client.jsx"],"sourcesContent":["import { useMemo, useState, useCallback } from \"react\";\nimport { A } from \"@features/ui\";\nimport {\n    iframe as iframeClass,\n    loaded as loadedClass,\n    unloaded as unloadedClass,\n    comment as commentClass,\n    header as headerClass\n} from \"./comment.module.css\";\n\nconst Account = ({url, display_name, acct}) => {\n    const name = display_name !== '' ? display_name : acct;\n    return <address><A rel=\"nofollow\" href={url}>{name}</A></address>;\n};\n\nconst render = content =>\n      `<!DOCTYPE html>\n<html>\n  <head>\n    <base target=\"_parent\">\n    <meta name=\"color-scheme\" content=\"dark light\">\n    <link rel=\"stylesheet\" href=\"/sandbox.css\">\n  </head>\n  <body>${content}</body>\n</html>`;\n\nconst useRender = content =>\n      useMemo(() => render(content), [content]);\n\nconst Comment = ({url, account, content, children}) => {\n    const srcdoc = useRender(content);\n\n    const [loaded, setLoaded] = useState(false);\n    const onLoad = useCallback(event => {\n        setLoaded(true);\n    }, []);\n\n    const loadClass = loaded ? loadedClass : unloadedClass;\n\n    return <article className={commentClass}>\n               <header className={headerClass}>\n                   <Account {...account} />\n                   <A rel=\"nofollow\" href={url}>#</A>\n               </header>\n                <iframe className={iframeClass + ' ' + loadClass}\n                        allow=\"\"\n                        sandbox=\"allow-top-navigation-by-user-activation\"\n                        srcDoc={srcdoc}\n                        onLoad={onLoad}\n                />\n               <div>\n                   {children}\n               </div>\n           </article>;\n};\n\nexport default Comment;\n","// extracted by mini-css-extract-plugin\nexport var comment = \"comment-module--comment--13767\";\nexport var header = \"comment-module--header--3b239\";\nexport var iframe = \"comment-module--iframe--0ce46\";\nexport var loaded = \"comment-module--loaded--961c0\";\nexport var unloaded = \"comment-module--unloaded--35fb3\";","import {\n    list as listClass,\n    item as itemClass,\n} from \"./comment-list.module.css\";\n\nexport const CommentList = ({children}) => {\n    return <div className={listClass}>{children}</div>;\n}\n\nexport const CommentItem = ({children}) => {\n    return <div className={itemClass}>{children}</div>;\n}\n","// extracted by mini-css-extract-plugin\nexport var item = \"comment-list-module--item--9f430\";\nexport var list = \"comment-list-module--list--556f9\";","import { useState, useEffect } from \"react\";\nimport Comment from \"./comment.jsx\";\nimport { CommentList, CommentItem } from \"./comment-list.jsx\";\n\nconst parseComment = ({id, url, content, account }) => [id, { url, account, content }];\n\nconst parseComments = comments => {\n    if (!comments) {\n        return null;\n    }\n    return new Map(comments.map(parseComment));\n};\n\nconst parseChildren = comments => {\n    if (!comments) {\n        return null;\n    }\n    // group by in_reply_to_id\n    const map = new Map(comments.map(c => [c.in_reply_to_id, []]));\n    for (const {in_reply_to_id, id} of comments) {\n        map.get(in_reply_to_id).push(id);\n    }\n    return map;\n};\n\nconst zipComments = ({id, comments, replies}) => {\n    function loop(id) {\n        const comment = comments.get(id);\n        const allReplies = replies.get(id) ?? [];\n\n        return { id, ...comment, replies: allReplies.map(loop) };\n    }\n\n    return (replies.get(id) ?? []).map(loop);\n};\n\n\nfunction CommentTree({id, account, url, content, replies}) {\n    return <Comment account={account} url={url} content={content}>\n               <CommentList>\n                   {\n\n                       replies.map(comment =>\n                           <CommentItem key={comment.id}>\n                               <CommentTree {...comment} />\n                           </CommentItem>\n                       )\n                   }\n               </CommentList>\n           </Comment>;\n}\n\n\nexport const CommentsClient = ({ host, id }) => {\n    const [comments, setComments] = useState(null);\n\n    useEffect(() => {\n        let ignore = false;\n\n        (async () => {\n            const request = new Request(new URL(`/api/v1/statuses/${id}/context`, `https://${host}`));\n            const response = await fetch(request);\n            if (!response.ok) {\n                throw new Error(`${response.status} ${response.statusText}`);\n            }\n            if (ignore) {\n                return;\n            }\n\n            const json = await response.json();\n            if (ignore) {\n                return;\n            }\n\n            const comments = json?.descendants ?? null;\n\n            const data = parseComments(comments);\n            const replies = parseChildren(comments);\n\n            const zipped = zipComments({ id, comments: data, replies });\n\n            setComments(zipped);\n        })();\n\n        return () => ignore = true;\n    }, [host, id]);\n\n    if (!comments) {\n        return \"Loading...\";\n    }\n\n    return <CommentList>\n               {\n                   comments.map(comment =>\n                       <CommentItem key={comment.id}>\n                           <CommentTree {...comment} />\n                       </CommentItem>)\n               }\n           </CommentList>;\n};\n\nexport default CommentsClient;\n"],"names":["Account","_ref","url","display_name","acct","name","_jsx","children","A","rel","href","_ref2","account","content","srcdoc","useMemo","render","useRender","loaded","setLoaded","useState","onLoad","useCallback","event","loadClass","_jsxs","className","iframeClass","allow","sandbox","srcDoc","CommentList","CommentItem","parseComment","id","CommentTree","_ref3","replies","Comment","map","comment","CommentsClient","_ref4","host","comments","setComments","useEffect","ignore","_json$descendants","request","Request","URL","response","fetch","ok","Error","status","statusText","json","descendants","data","Map","parseComments","c","in_reply_to_id","get","push","parseChildren","zipped","_replies$get2","loop","_replies$get","zipComments"],"sourceRoot":""}