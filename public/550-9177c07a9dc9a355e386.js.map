{"version":3,"file":"550-9177c07a9dc9a355e386.js","mappings":"oMAMA,MAAMA,EAAO,CAAEC,cAAc,EAAMC,eAAe,GA6ClD,UA3BcC,KAGV,MAAM,KAAEC,EAAI,SAAEC,EAAQ,aAAEC,EAAY,YAAEC,GAnBzBC,MACb,MAAMC,GAAWC,EAAAA,EAAAA,eACXC,GAAmBC,EAAAA,EAAAA,kBAAiBH,IAEpC,EAAGI,IAAmBC,EAAAA,EAAAA,kBACtB,EAACC,EAAa,EAACC,IAAmBC,EAAAA,EAAAA,UAASN,GAC3CJ,GAAcW,EAAAA,EAAAA,cAAY,KAC5BL,GAAgB,IAAMG,EAAgBL,IAAkB,GACzD,CAACA,KAEE,KAAEP,EAAI,SAAEC,GAAaM,GACnBN,SAAUC,GAAiBS,EAEnC,MAAO,CAAEX,OAAMC,WAAUC,eAAcC,cAAa,EAMEC,IAGtDW,EAAAA,EAAAA,YAAU,KACN,GAAId,IAAaC,EACb,OAGJ,GAAIF,EACA,OAIJ,MAAMgB,GAAUC,EAAAA,EAAAA,KACXD,GAILA,EAAQE,MAAMtB,EAAK,GACnB,CAACI,EAAMC,EAAUC,KAErBiB,EAAAA,EAAAA,GAAiBhB,EAAY,C","sources":["webpack://words-to-kick-your-teeth-out/./src/features/focus/focus.jsx"],"sourcesContent":["import { useCallback, useEffect, useDeferredValue, useState, useTransition } from \"react\";\nimport { useLocation } from \"@gatsbyjs/reach-router\";\nimport { useOnRouteUpdate } from \"./my-location.js\";\nimport { getFocus } from \"./focus-ref.js\";\n\n// Gatsby already handles scroll, focus-visible for extra emphasis\nconst opts = { focusVisible: true, preventScroll: true };\n\nconst useFocus = () => {\n    const location = useLocation();\n    const deferredLocation = useDeferredValue(location);\n\n    const [, startTransition] = useTransition();\n    const [prevLocation, setPrevLocation] = useState(deferredLocation);\n    const endNavigate = useCallback(() => {\n        startTransition(() => setPrevLocation(deferredLocation));\n    }, [deferredLocation]);\n\n    const { hash, pathname } = deferredLocation;\n    const { pathname: prevPathname } = prevLocation;\n\n    return { hash, pathname, prevPathname, endNavigate };\n};\n\nconst Focus = () => {\n    // Do a silly little dance to update the focus lazily and avoid\n    // forced reflow\n    const { hash, pathname, prevPathname, endNavigate } = useFocus();\n    const isNavigating = prevPathname !== pathname;\n\n    useEffect(() => {\n        if (pathname === prevPathname) {\n            return;\n        }\n\n        if (hash) {\n            return;\n        }\n\n        // FIXME useRef?\n        const current = getFocus();\n        if (!current) {\n            return;\n        }\n\n        current.focus(opts);\n    },  [hash, pathname, prevPathname]);\n\n    useOnRouteUpdate(endNavigate);\n};\n\nexport default Focus;\n"],"names":["opts","focusVisible","preventScroll","Focus","hash","pathname","prevPathname","endNavigate","useFocus","location","useLocation","deferredLocation","useDeferredValue","startTransition","useTransition","prevLocation","setPrevLocation","useState","useCallback","useEffect","current","getFocus","focus","useOnRouteUpdate"],"sourceRoot":""}